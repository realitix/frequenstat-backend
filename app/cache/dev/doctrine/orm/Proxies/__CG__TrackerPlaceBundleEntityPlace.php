<?php

namespace Proxies\__CG__\Tracker\PlaceBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Place extends \Tracker\PlaceBundle\Entity\Place implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'id', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'name', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'address', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'placeType', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'user', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'boxes', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'configurations', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'created', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'modified');
        }

        return array('__isInitialized__', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'id', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'name', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'address', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'placeType', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'user', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'boxes', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'configurations', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'created', '' . "\0" . 'Tracker\\PlaceBundle\\Entity\\Place' . "\0" . 'modified');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Place $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', array());

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', array());

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array());

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setModified($modified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModified', array($modified));

        return parent::setModified($modified);
    }

    /**
     * {@inheritDoc}
     */
    public function getModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModified', array());

        return parent::getModified();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Tracker\UserBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function addBox(\Tracker\PlaceBundle\Entity\Box $boxes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBox', array($boxes));

        return parent::addBox($boxes);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBox(\Tracker\PlaceBundle\Entity\Box $boxes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBox', array($boxes));

        return parent::removeBox($boxes);
    }

    /**
     * {@inheritDoc}
     */
    public function getBoxes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBoxes', array());

        return parent::getBoxes();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', array($address));

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', array());

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlaceType($placeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlaceType', array($placeType));

        return parent::setPlaceType($placeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlaceType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlaceType', array());

        return parent::getPlaceType();
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeName', array());

        return parent::getTypeName();
    }

    /**
     * {@inheritDoc}
     */
    public function addConfiguration(\Tracker\PlaceBundle\Entity\PlaceConfiguration $configurations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addConfiguration', array($configurations));

        return parent::addConfiguration($configurations);
    }

    /**
     * {@inheritDoc}
     */
    public function removeConfiguration(\Tracker\PlaceBundle\Entity\PlaceConfiguration $configurations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeConfiguration', array($configurations));

        return parent::removeConfiguration($configurations);
    }

    /**
     * {@inheritDoc}
     */
    public function getConfigurations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfigurations', array());

        return parent::getConfigurations();
    }

}
