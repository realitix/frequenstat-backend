<?php

namespace Tracker\PlaceBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRepository extends EntityRepository
{
    /**
     * Find capture between two dates 
     * On va écrire manuellement la requête
     * 
     * @param Datetime $date1
     * @param Datetime date2
     * @param Place place
     */
    public function countBetween($date1, $date2, $place)
    {
		$em = $this->_em;
		$connection = $em->getConnection();
		$tableCapture = $em->getClassMetadata('TrackerCaptureBundle:Capture')->getTableName();
		$tableBox = $em->getClassMetadata('TrackerPlaceBundle:Box')->getTableName();
		$tablePlace = $em->getClassMetadata('TrackerPlaceBundle:Place')->getTableName();
		
		$sqlSum = "
			SELECT COUNT(*) sum
			FROM $tableCapture c
				INNER JOIN $tableBox b ON b.id = c.box_id
				INNER JOIN $tablePlace p ON b.place_id = p.id
			WHERE p.id = :idPlace
			AND c.date_capture BETWEEN :date1 and :date2
		";
		
		$sqlUnique = "
		    SELECT COUNT(DISTINCT c.station_id) sum
			FROM $tableCapture c
				INNER JOIN $tableBox b ON b.id = c.box_id
				INNER JOIN $tablePlace p ON b.place_id = p.id
			WHERE p.id = :idPlace
			AND c.date_capture BETWEEN :date1 and :date2
		";
		
		$statement = $connection->prepare($sqlSum);
		$statement->bindValue("idPlace", $place->getId());
		$statement->bindValue("date1", $date1, "datetime");
		$statement->bindValue("date2", $date2, "datetime");
		$statement->execute();
        $sum = $statement->fetchColumn();
        
        $statement = $connection->prepare($sqlUnique);
		$statement->bindValue("idPlace", $place->getId());
		$statement->bindValue("date1", $date1, "datetime");
		$statement->bindValue("date2", $date2, "datetime");
		$statement->execute();
        $unique = $statement->fetchColumn();
        
        return compact('sum', 'unique');
    }
    
    public function findStatistics(\Tracker\UserBundle\Entity\User $user)
    {
        $em = $this->_em;
		$connection = $em->getConnection();
		$tableCapture = $em->getClassMetadata('TrackerCaptureBundle:Capture')->getTableName();
		$tableBox = $em->getClassMetadata('TrackerPlaceBundle:Box')->getTableName();
		$tablePlace = $em->getClassMetadata('TrackerPlaceBundle:Place')->getTableName();
		
		$sql = "
		    SELECT 
		        COUNT(DISTINCT c.station_id) stations,
		        p.name, p.id, p.modified
			FROM $tablePlace p
			    INNER JOIN $tableBox b ON b.place_id = p.id
			    INNER JOIN $tableCapture c ON b.id = c.box_id
			WHERE p.user_id = :idUser
			GROUP BY p.id, p.name, p.modified
		";
		
		$statement = $connection->prepare($sql);
		$statement->bindValue("idUser", $user->getId());
		$statement->execute();
        return $statement->fetchAll();
    }
    
    /**
     * Renvoie toutes les capture de la dernière minute
     * groupé par seconde
     */ 
    public function findLastSeconds(Place $place, $seconds)
    {
		$em = $this->_em;
		$tableCapture = $em->getClassMetadata('TrackerCaptureBundle:Capture')->getTableName();
		$tableBox = $em->getClassMetadata('TrackerPlaceBundle:Box')->getTableName();
		$tableStation = $em->getClassMetadata('TrackerStationBundle:Station')->getTableName();

		$sql = "
			SELECT ARRAY_AGG(s.mac) AS macs, date_trunc('second', c.date_capture) AS date_capture
			FROM $tableCapture c
			    JOIN $tableStation s ON c.station_id = s.id
			    JOIN $tableBox b ON c.box_id = b.id
			WHERE b.place_id = :idPlace
				AND c.date_capture > CURRENT_TIMESTAMP - INTERVAL '$seconds seconds'
			GROUP BY date_capture
			ORDER BY date_capture ASC
		";
		
		$connection = $em->getConnection();
		$statement = $connection->prepare($sql);
		$statement->bindValue("idPlace", $place->getId());
		$statement->execute();
        
        return $statement->fetchAll();
    }
}
